视频讲解：[【基础算法精讲 14】](https://www.bilibili.com/video/BV1mG4y1A7Gu/)，制作不易，欢迎点赞~

* [sol1-Python3]

```py
MAPPING = "", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"

class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        n = len(digits)
        if n == 0:
            return []
        ans = []
        path = [''] * n
        def dfs(i: int) -> None:
            if i == n:
                ans.append(''.join(path))
                return
            for c in MAPPING[int(digits[i])]:
                path[i] = c
                dfs(i + 1)
        dfs(0)
        return ans
```

* [sol1-Java]

```java
class Solution {
    private static final String[] MAPPING = new String[]{"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};

    private final List<String> ans = new ArrayList<>();
    private char[] digits, path;

    public List<String> letterCombinations(String digits) {
        int n = digits.length();
        if (n == 0) return List.of();
        this.digits = digits.toCharArray();
        path = new char[n];
        dfs(0);
        return ans;
    }

    private void dfs(int i) {
        if (i == digits.length) {
            ans.add(new String(path));
            return;
        }
        for (char c : MAPPING[digits[i] - '0'].toCharArray()) {
            path[i] = c;
            dfs(i + 1);
        }
    }
}
```

* [sol1-C++]

```cpp
class Solution {
    string MAPPING[10] = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
public:
    vector<string> letterCombinations(string digits) {
        int n = digits.length();
        if (n == 0) return {};
        vector<string> ans;
        string path(n, 0);
        function<void(int)> dfs = [&](int i) {
            if (i == n) {
                ans.emplace_back(path);
                return;
            }
            for (char c : MAPPING[digits[i] - '0']) {
                path[i] = c;
                dfs(i + 1);
            }
        };
        dfs(0);
        return ans;
    }
};
```

* [sol1-Go]

```go
var mapping = [...]string{"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"}

func letterCombinations(digits string) (ans []string) {
    n := len(digits)
    if n == 0 {
        return
    }
    path := make([]byte, n)
    var dfs func(int)
    dfs = func(i int) {
        if i == n {
            ans = append(ans, string(path))
            return
        }
        for _, c := range mapping[digits[i]-'0'] {
            path[i] = byte(c)
            dfs(i + 1)
        }
    }
    dfs(0)
    return
}
```

#### 复杂度分析

- 时间复杂度：$O(n4^n)$，其中 $n$ 为 $\textit{digits}$ 的长度。最坏情况下每次需要枚举 $4$ 个字母，递归次数为一个满四叉树的节点个数，那么一共会递归 $O(4^n)$ 次（等比数列和），再算上加入答案时需要 $O(n)$ 的时间，所以时间复杂度为 $O(n4^n)$。
- 空间复杂度：$O(n)$。返回值的空间不计。

